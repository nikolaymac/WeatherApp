//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `cloudy`.
    static let cloudy = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloudy")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `rain`.
    static let rain = Rswift.ImageResource(bundle: R.hostingBundle, name: "rain")
    /// Image `sunny`.
    static let sunny = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunny")
    /// Image `sunrise`.
    static let sunrise = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunrise")
    /// Image `sunset`.
    static let sunset = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunset")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloudy", bundle: ..., traitCollection: ...)`
    static func cloudy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rain", bundle: ..., traitCollection: ...)`
    static func rain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sunny", bundle: ..., traitCollection: ...)`
    static func sunny(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunny, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sunrise", bundle: ..., traitCollection: ...)`
    static func sunrise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunrise, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sunset", bundle: ..., traitCollection: ...)`
    static func sunset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunset, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `DailyTVCell`.
    static let dailyTVCell = _R.nib._DailyTVCell()
    /// Nib `DegreesByHoursTVCell`.
    static let degreesByHoursTVCell = _R.nib._DegreesByHoursTVCell()
    /// Nib `DegreesHourCVCell`.
    static let degreesHourCVCell = _R.nib._DegreesHourCVCell()
    /// Nib `DegreesTVCell`.
    static let degreesTVCell = _R.nib._DegreesTVCell()
    /// Nib `SunTVCell`.
    static let sunTVCell = _R.nib._SunTVCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DailyTVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyTVCell) instead")
    static func dailyTVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyTVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DegreesByHoursTVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.degreesByHoursTVCell) instead")
    static func degreesByHoursTVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.degreesByHoursTVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DegreesHourCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.degreesHourCVCell) instead")
    static func degreesHourCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.degreesHourCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DegreesTVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.degreesTVCell) instead")
    static func degreesTVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.degreesTVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SunTVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sunTVCell) instead")
    static func sunTVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sunTVCell)
    }
    #endif

    static func dailyTVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyTVCell? {
      return R.nib.dailyTVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyTVCell
    }

    static func degreesByHoursTVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DegreesByHoursTVCell? {
      return R.nib.degreesByHoursTVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DegreesByHoursTVCell
    }

    static func degreesHourCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DegreesHourCVCell? {
      return R.nib.degreesHourCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DegreesHourCVCell
    }

    static func degreesTVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DegreesTVCell? {
      return R.nib.degreesTVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DegreesTVCell
    }

    static func sunTVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SunTVCell? {
      return R.nib.sunTVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SunTVCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SunTVCell.validate()
    }

    struct _DailyTVCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DailyTVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyTVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyTVCell
      }

      fileprivate init() {}
    }

    struct _DegreesByHoursTVCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DegreesByHoursTVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DegreesByHoursTVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DegreesByHoursTVCell
      }

      fileprivate init() {}
    }

    struct _DegreesHourCVCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DegreesHourCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DegreesHourCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DegreesHourCVCell
      }

      fileprivate init() {}
    }

    struct _DegreesTVCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DegreesTVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DegreesTVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DegreesTVCell
      }

      fileprivate init() {}
    }

    struct _SunTVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SunTVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SunTVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SunTVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sunrise", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sunrise' is used in nib 'SunTVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sunset", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sunset' is used in nib 'SunTVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WeatherViewController

      let bundle = R.hostingBundle
      let errorViewController = StoryboardViewControllerResource<ErrorViewController>(identifier: "ErrorViewController")
      let name = "Main"
      let weatherViewController = StoryboardViewControllerResource<WeatherViewController>(identifier: "WeatherViewController")

      func errorViewController(_: Void = ()) -> ErrorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: errorViewController)
      }

      func weatherViewController(_: Void = ()) -> WeatherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: weatherViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().errorViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'errorViewController' could not be loaded from storyboard 'Main' as 'ErrorViewController'.") }
        if _R.storyboard.main().weatherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'weatherViewController' could not be loaded from storyboard 'Main' as 'WeatherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
